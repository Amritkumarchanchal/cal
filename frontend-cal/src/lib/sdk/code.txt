// Directory: src/types/coreEngine.ts

// User's Enrolled Courses
export interface EnrolledCourse {
  id: number;
  name: string;
  description: string;
  visibility: string;
  instance_id: number;
  start_date: string;
  end_date: string;
}

// Course Instance Details
export interface CourseInstance {
  id: number;
  name: string;
  description: string;
  start_date: string;
  end_date: string;
}

// Module Details
export interface Module {
  id: number;
  title: string;
  description: string;
  sequence: number;
}

// Section Details
export interface Section {
  id: number;
  title: string;
  sequence: number;
  section_items: SectionItemSummary[];
}

// Section Item Summary
export interface SectionItemSummary {
  id: number;
  type: string; // Possible values: "article", "video", "assessment"
}

// Video Details
export interface Video {
  id: number;
  source: string;
  start_time: string;
  end_time: string;
  transcript: string;
  sequence: number;
  assessmentId: number;
}

// Article Details
export interface Article {
  id: number;
  content: string;
  sequence: number;
  assessmentId: number;
}

// Assessment Details
export interface Assessment {
  id: number;
  title: string;
  time_limit: number;
  sequence: number;
}

---

// Directory: src/config.ts

export const CORE_API_CONFIG = {
  BASE_URL: process.env.REACT_APP_CORE_API_BASE_URL || 'https://mock-api.mocky.io/v3',
  ENDPOINTS: {
    USER_COURSES: '/users/{userId}/courses',
    COURSE_INSTANCE: '/course-instances/{instanceId}',
    MODULES: '/courses/{courseId}/modules',
    SECTIONS: '/modules/{moduleId}/sections',
    SECTION_ITEMS: '/sections/{sectionId}/items',
    VIDEOS: '/videos/{videoId}',
    ARTICLES: '/articles/{articleId}',
    ASSESSMENTS: '/assessments/{assessmentId}',
  },
};

export const ACTIVITY_API_CONFIG = {
  BASE_URL: process.env.REACT_APP_ACTIVITY_API_BASE_URL || 'https://mock-api.mocky.io/v3',
  ENDPOINTS: {
    // Add endpoints for the Activity Engine here when needed
  },
};

---

// Directory: src/utils/provideParams.ts

/**
 * Utility function to provide parameters to an API route.
 * @param route - The API route string with placeholders.
 * @param params - Key-value pairs to replace placeholders.
 * @returns The route with placeholders replaced by actual values.
 */
export const provideParams = (route: string, params: Record<string, string | number>): string => {
  let replacedRoute = route;
  Object.entries(params).forEach(([key, value]) => {
    replacedRoute = replacedRoute.replace(`{${key}}`, value.toString());
  });
  return replacedRoute;
};

---

// Directory: src/lib/CoreEngine.ts

import axios, { AxiosInstance } from 'axios';
import { CORE_API_CONFIG } from '../config';
import { provideParams } from '../utils/provideParams';
import {
  EnrolledCourse,
  CourseInstance,
  Module,
  Section,
  SectionItemSummary,
  Video,
  Article,
  Assessment,
} from '../types/coreEngine';

/**
 * CoreEngine: A class to handle all API requests to the Core Engine.
 */
export class CoreEngine {
  private engine: AxiosInstance;

  /**
   * Initialize the CoreEngine instance.
   */
  constructor() {
    this.engine = axios.create({
      baseURL: CORE_API_CONFIG.BASE_URL,
      timeout: 5000, // 5-second timeout for all requests
    });
  }

  /**
   * Fetch all courses a user is enrolled in.
   * @param userId - ID of the user.
   * @returns A list of enrolled courses.
   */
  public async getUserCourses(userId: number): Promise<EnrolledCourse[]> {
    const endpoint = provideParams(CORE_API_CONFIG.ENDPOINTS.USER_COURSES, { userId });
    const response = await this.engine.get<EnrolledCourse[]>(endpoint);
    return response.data;
  }

  /**
   * Fetch details of a specific course instance.
   * @param instanceId - ID of the course instance.
   * @returns The course instance details.
   */
  public async getCourseInstance(instanceId: number): Promise<CourseInstance> {
    const endpoint = provideParams(CORE_API_CONFIG.ENDPOINTS.COURSE_INSTANCE, { instanceId });
    const response = await this.engine.get<CourseInstance>(endpoint);
    return response.data;
  }

  /**
   * Fetch all modules for a specific course.
   * @param courseId - ID of the course.
   * @returns A list of modules.
   */
  public async getModules(courseId: number): Promise<Module[]> {
    const endpoint = provideParams(CORE_API_CONFIG.ENDPOINTS.MODULES, { courseId });
    const response = await this.engine.get<Module[]>(endpoint);
    return response.data;
  }

  /**
   * Fetch all sections for a specific module.
   * @param moduleId - ID of the module.
   * @returns A list of sections.
   */
  public async getSections(moduleId: number): Promise<Section[]> {
    const endpoint = provideParams(CORE_API_CONFIG.ENDPOINTS.SECTIONS, { moduleId });
    const response = await this.engine.get<Section[]>(endpoint);
    return response.data;
  }

  /**
   * Fetch all section items for a specific section.
   * @param sectionId - ID of the section.
   * @returns A list of section items.
   */
  public async getSectionItems(sectionId: number): Promise<SectionItemSummary[]> {
    const endpoint = provideParams(CORE_API_CONFIG.ENDPOINTS.SECTION_ITEMS, { sectionId });
    const response = await this.engine.get<SectionItemSummary[]>(endpoint);
    return response.data;
  }

  /**
   * Fetch details of a specific video.
   * @param videoId - ID of the video.
   * @returns The video details.
   */
  public async getVideo(videoId: number): Promise<Video> {
    const endpoint = provideParams(CORE_API_CONFIG.ENDPOINTS.VIDEOS, { videoId });
    const response = await this.engine.get<Video>(endpoint);
    return response.data;
  }

  /**
   * Fetch details of a specific article.
   * @param articleId - ID of the article.
   * @returns The article details.
   */
  public async getArticle(articleId: number): Promise<Article> {
    const endpoint = provideParams(CORE_API_CONFIG.ENDPOINTS.ARTICLES, { articleId });
    const response = await this.engine.get<Article>(endpoint);
    return response.data;
  }

  /**
   * Fetch details of a specific assessment.
   * @param assessmentId - ID of the assessment.
   * @returns The assessment details.
   */
  public async getAssessment(assessmentId: number): Promise<Assessment> {
    const endpoint = provideParams(CORE_API_CONFIG.ENDPOINTS.ASSESSMENTS, { assessmentId });
    const response = await this.engine.get<Assessment>(endpoint);
    return response.data;
  }
}

---

// Directory: src/lib/sdk.ts

import { CoreEngine } from './CoreEngine';

/**
 * Unified SDK instance exposing CoreEngine functionality.
 */
export const calSDK = {
  core: new CoreEngine(),
};
